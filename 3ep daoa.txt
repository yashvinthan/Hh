#include <iostream>
using namespace std;

const int MAX_NODES = 100;

void warshall(int graph[MAX_NODES][MAX_NODES], int num_nodes) {
    int dist[MAX_NODES][MAX_NODES];

    // Copy the original graph to dist matrix
    for (int i = 0; i < num_nodes; ++i) {
        for (int j = 0; j < num_nodes; ++j) {
            dist[i][j] = graph[i][j];
        }
    }

    // Applying Warshall's algorithm
    for (int k = 0; k < num_nodes; ++k) {
        for (int i = 0; i < num_nodes; ++i) {
            for (int j = 0; j < num_nodes; ++j) {
                if (dist[i][k] && dist[k][j])
                    dist[i][j] = 1;
            }
        }
    }

    // Output the transitive closure matrix (no extra space at end of lines)
    for (int i = 0; i < num_nodes; ++i) {
        for (int j = 0; j < num_nodes; ++j) {
            cout << dist[i][j];
            if (j != num_nodes - 1)
                cout << " ";
        }
        cout << endl;
    }
}

int main() {
    int num_nodes;
    cin >> num_nodes;

    int graph[MAX_NODES][MAX_NODES];
    for (int i = 0; i < num_nodes; ++i) {
        for (int j = 0; j < num_nodes; ++j) {
            cin >> graph[i][j];
        }
    }

    warshall(graph, num_nodes);

    return 0;
}
